<%@ page language="java" contentType="text/html; charset=EUC-KR"
    pageEncoding="EUC-KR"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="EUC-KR">
<title>Insert title here</title>
</head>
<body>
<script>
//스프링 프레임워크
//오늘날 가장 많이 사용하는 자바 기반 응용 프로그램 개발 프레임워크(전자정부표준프레임워크)
//
//스프링을 왜 사용하는가?
//1.스프링 컨테이너(경량)에 객체를 스프링 빈으로 등록하면 스프링 빈으로 찾아서 사용(DI,AOP,IoC,myBatis라이브러리 지원)지원
//2. 스프링 빈 의존관계 설정
//3. 객체지향 언어의 특징을 살린 프레임워크
//ex)추상화,상속,다형성,캡슐화
//4. 자바 플랫폼을 위한 오픈 소스 애플리케이션 프레임워크
//5. 소프트웨어 개발의 뼈대 역할
//6. 자바코드를 줄일수 있다(빤복되는 작업을 줄일 수 있다)
//7. 프로젝트 관리 용이(개발자들과 동시에 프로젝트 하기가 용이)

//IoC컨테이너란?
//A. 객체를 생성해서 담을 수 있는 그릇
//B. 객체를 생성하고 의존관계를 연결해주는 것

//자바에서 객체는 부모클래스형 참조변수,또는 구현한 인터페이스 변수에 담을 수 있다.
//=>참조변수를 통해 메소드를 호출하면 오버라이딩된 메소드가 호출된다!!
//=>다형성 개념을 사용하면 참조변수 선언부분은 수정하지 않아도 되지만 객체 생성부분은 코드가 변경되어야 한다.

//2. 다형성은 왜 필요한가?
//다형성이 없으면 비슷한 기능의 코드들이 중복된다.
//하나의 타입에 여러 객체를 대입해서 다양한 기능을 이용할 수 있도록 해준다.
//객체를 실행 시점에 유연한 변경이 가능하다.
//같은 타입이지만 실행결과가 다양한 객체를 이용할 수 있다.

//IoC(Inversion of Control):제어역전
//객체를 생성하고 연결, 실행하는 것은 결합도가 높아지고 유지 보수가 힘들어진다.
//=>따라서, 제어흐름을 외부에서 관리하고 각각의 객체들은 본인의 로직에서만 실행하도록 하는것이 IoC

//프로그램을 개발할 때, 프로그램 흐름, 객체에 대한 제어권을 원래는 개발자가 갖고 있음.
//하지만, 스프링에서는 제어권을 프레임워크가 갖는다.

//IoC컨테이너 종류
//A.BeanFactory : 스프링컨테이너의 최상위 인터페이스
// : 스프링 빈을 관리, 조회
//B.ApplicationContext : BeanFactory상속받아 제공
//    : 스프링 빈을 관리, 조회외 부가기능 제공
//=>스프링 프레임워크는 IoC컨테이너를 이용해 Bean객체들을 관리한다.


</script>
</body>
</html>
