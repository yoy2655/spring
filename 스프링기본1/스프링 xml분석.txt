Class 1 : MainClassUseXMLsImport.java

: 메인 클래스

1. 실행시 ClassPathXmlApplicationContext ctx 의 이름으로 appCtxImport.xml 문서 로드
(즉, ioc 컨테이너를 만들어준다)
이때 lazy-init="true" 가 없으므로, 로딩과 동시에 각 자바빈의 객체들이 생성된다.

-> appCtxImport.xml에서 불러오는 appCtx3.xml을 통해 informationService 이라 이름붙인 자바빈 호출.


****appCtxImport.xml 에 있는 정보****

1) appCtx2.xml, appCtx3.xml 을 import

-> appCtx2.xml 파일에는

각기 다른 아이디, dataBaseConnectionInfoDev와 dataBaseConnectionInfoReal로 DataBaseConnectionInfo 자바빈을 등록하고 있고, 각각 setter를 이용하여 url, id, pw를 주입하고 있다.

-> appCtx3.xml 파일에는

EMSInformationService 자바빈을 등록하고 있고, 마찬가지로 각 필드들에 setter를 이용해서 정보들을 주입하고 있다.(여기에는 위에서 주입된 자바빈 DataBaseConnectionInfo 도 이곳에 주입하고 있다.)

2) service 패키지에 있는 

- StudentRegisterService

- StudentModifyService

- StudentDeleteService

- StudentSelectService

- StudentAllSelectService

의 5개의 빈을 등록하고 있고, 이들은 모두 StudentDao 자바빈을 생성자를 이용해 주입하고 있다.
--------------------------------------------------------------------------------------------------------------------

2. 생성된 EMSInformationService 객체를 getBean으로 가지고 와서 출력을 하고 있다.
(출력은  EMSInformationService의  outputEMSInformation() 메소드를 이용해서 개발연도, 개발자, 관리자 등을 출력하고 있다.)

--------------------------------------------------------------------------------------------------------------------

3. 생성된 StudentRegisterService 객체를 getBean으로 가지고 온다.

이 메인클래스에는 학생들의 번호, 아이디, 비번, 이름, 나이 등의 정보들이 각각 1차원 배열 안에 담겨있는데, 이들을 등록하는 register 메소드를 수행한다.(StudentRegisterService의 안에 있는 메소드임)

 : StudentRegisterService.java -> constrctor-arg로 StudentDao통해 매핑된 학생 정보 배열 출력


 * register 메소드 실행 흐름 : 
먼저 인덱스별로 각 학생들의 정보를 이용해서 Student 객체를 생성
->   StudentRegisterService 객체 안에서 주입된 StudentDao 객체에서 insert 메소드를 이용해 위에서 만든 Student 객체를 주입시킴
(이때 유효성 검사로 학생의 아이디(sNum)을 이용하는데, 이미 있을 경우에는 삽입이 안되도록 하고 있다.)
(참고 : StudentDao 클래스의 필드는 Map<String, Student> 하나이고, 이 안에 각 학생들의 정보가 누적되면서 저장되어있다. ! 싱글톤이기 때문에 객체는 하나뿐이면 정보들이 들어있는 상태로 객체가 유지되고 있다.)

--------------------------------------------------------------------------------------------------------------------

4. 생성된 StudentModifyService 객체를 getBean으로 가지고 온다.

여기에서 새로운 정보를 입력한 Student 객체를 만들어서 StudentModifyService 안의 modify 메소드를 수행한다.

 : StudentModifyService에서 입력값 업데이트

 * modify 메소드 실행 흐름 : 
새로운 학생의 정보를 이용해서 Student 객체를 생성
->   StudentModifyService 객체 안에서 주입된 StudentDao 객체에서 update 메소드를 이용해 위에서 만든 Student 객체를 주입시킴
(이때 유효성 검사로 학생의 아이디(sNum)을 이용하는데, 이미 있을 경우에는 삽입이 안되도록 하고 있다.)

--------------------------------------------------------------------------------------------------------------------

5. 생성된 StudentSelectService 객체를 getBean으로 가지고 온다.

 여기에서 StudentSelectService 안의 select 메소드를 수행한다.(학생의 번호(키값)을 매개변수로, 메소드 실행시 해당 학생의 정보가 들어있는 student 객체를 반환)
-> 반환된 객체를 각 필드별로 콘솔에 출력하고 있다.

 : StudentDao에 매핑된 sNum(H39lesvj7544vf89)에 해당하는 값 출력

--------------------------------------------------------------------------------------------------------------------

6. 생성된 StudentAllSelectService 객체를 getBean으로 가지고 온다. -  StudentAllSelectService ->  입력된 학생정보 전부 출력

 여기에서 StudentAllSelectService 안의 allSelect 메소드를 수행한다.
(이제까지 수정된 StudentDao 객체 안의 getStudentDB 메소드를 이용해서 Map 전체를 반환한다.)

-> 반환된 Map의 모든 값들을 iterator를 이용하여 콘솔에 출력하고 있다.

--------------------------------------------------------------------------------------------------------------------

7. 스캐너를 이용해 정수값을 입력받는다.
-> 2를 입력시 bye~를 출력한 채 ioc컨테이너 ctx가 종료된다.
-> 1을 입력시 class number를 입력하라고 하고, 이때 '스캐너를 이용해 sNum을 입력하면'
StudentSelectService 의 select 메소드를 이용하여 해당 학생의 정보를 콘솔에 출력한다. 

--------------------------------------------------------------------------------------------------------------------





/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Class 2 : MainClassUseXML.java
-classpath:applicationContext.xml을 읽음
-EMS를 제외한 모든 메소드들에 DI를 통해 dao로 경로를 이어주게된다

-EMSInformationService를 읽어와서 개발자정보에 대한 출력을 진행
-해당 applicationContext에는 개발자들의 이름과 db관련 id, pw url과 개발기간,버전등이 저장되어있으며 
 해당 내용은 DI를 통해 쉽게 수정할수 있도록 applicationContext에 넣어져있다

-StudentRegisterService : main위에 미리 입력해둔 문자배열들의 값을 StudentRegisterService를 이용해 등록하는 작업

-StudentModifyService: 수정하는 작업 
 H39lesvj7544vf89, deer, 28465, melissa, 24, W, Public Administration이었던 원래값을 
 sNum값을 기준으로 데이터가 없다면 경고문을 따로 출력하고, 데이터가 있다면 main에서 입력한 값인
 H39lesvj7544vf89, deer, 00000, melissa, 26, W, Vocal Music 으로 값이 업데이트된다

-StudentSelectService: 특정학생을 출력하는작업
 modifiedStudent에 방금 수정한 학생의 클래스넘버를 넣어 해당 학생의 정보들을 출력하는작업
 실제로 출력했을때 수정된 값이 제대로 출력되어 나왔다

-StudentAllSelectService:저장된 모든 학생들의 데이터를 전부 출력하는 작업

-무한반복으로 1번과 2번을 선택하게 함
-2번 선택시 break를 이용해 탈출후 종료
-1번 선택시 classnumber을 입력하게 함
-입력한 값이 존재하면 해당 데이터를 출력후 다시 while의 처음으로 돌아가게됨

 * applicationContext.xml
java파일들을 불러와 데이터를 주입하는 작업
dao와 자바파일들을 constructor-arg ref를 이용해 연결해주는 작업
EMSInformationService 한정으로 해당 프로젝트에관한 정보와 작업자들에 대한 정보를 입력,수정할수있음

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Class 3 : MainClassUseXMLs.java

String[] sNums = {"H39r8djakndfae32", "H39asdfaelu42o23", "H39iiemamca8w9h4", 
						  "H39lkmn754fghia7", "H39plo865cuy8k92", "H39mnbviiaed89q1", 
						  "H399omjjyv56t3d5", "H39lczaqwg644gj8", "H39ymbcsh74thgh2", 
						  "H39lesvj7544vf89"};
		
		String[] sIds = {"rabbit", "hippo", "raccoon", "elephant", "lion", 
					    "tiger", "pig", "horse", "bird", "deer"};
		
		String[] sPws = {"96539", "94875", "15284", "48765", "28661", 
						"60915", "30028", "29801", "28645", "28465"};
		
		String[] sNames = {"agatha", "barbara", "chris", "doris", "elva", 
						  "fiona", "holly", "jasmin", "lena", "melissa"};


  0.    sNums, slds, sPws, sNames 에 ""에 있는 것들(스트링 값으로)을 배열로 저장(넣어주겠다)하겠다.




String[] appCtxs = {"classpath:appCtx1.xml", "classpath:appCtx2.xml", "classpath:appCtx3.xml"};
		ClassPathXmlApplicationContext ctx = 
				new ClassPathXmlApplicationContext(appCtxs);

->  app Ctxs 안에 .xml들을 넣어주고 그걸 ClassPathXmlApplicationContext의 객체인 ctx에 넣어준다.

=> 배열 appCtxs 안에 있는 appCtx1.xml, appCtx2.xml, appCtx3.xml 빈값들을 가져와 동작시키기 위한 준비.
=> appCtx1.xml: studeanDAO(쿼리 실행해주는곳)에 연결 하여 해당 값과 비교
=> appCtx2.xml: 데이터 베이스 연결 
=> appCtx3.xml: 회사정보 (대표자/ 연락처/ 회사 정보 값)
-----------------------------------------------------------------------------------------------------

 EMSInformationService informationService = ctx.getBean("informationService", EMSInformationService.class);
   informationService.outputEMSInformation();

-> ctx에 Bean(informationService, EMSInformationService.class)을 가져온다.== informationService
=> get Bean으로 EMSiInformationService.java 클래스 내용을 불러오고 해당 클래스 내에 있는 outputDataBaseInfo() 함수에 접근하여 
   jdbc url, id, password 를 불러오는 코드

=>EMSInformationService.class
  - outputEMSInformation(): (회사 정보 출력전 회사 창건일? 년, 달, 일 ~ 회사 현시점의) 데이터 베이스를 이용하여 출력 함수( Main에 뿌린다.) 
  - outputDataBaseInfo(): 데이터베이스 주소, 유저 아이디, 유저 비밀번호 가져와서 다듬어 놓은 함수(Main에 뿌린다)

-------------------------------------------------
StudentRegisterService registerService = ctx.getBean("registerService", StudentRegisterService.class);
		for (int j = 0; j < sNums.length; j++) {
			Student student = new Student(sNums[j], sIds[j], sPws[j], sNames[j], 
					sAges[j], sGenders[j], sMajors[j]);
			registerService.register(student);
		}
-> ctx에 Bean(registerService, StudentRegisterService.class)을 가져온다. 아까  문자열들이 저장된 sNum을 for문으로 읽어준다.
sNums에 저장되었던 것들을 sNums,slds,sPws, sNames,sAges,sGenders,sMajors에 저장해준다.
-> resgisterService에 이것들을 저장해준다.

데이터 베이스에 sNum 값을 기준으로 데이터 베이스에 값을 넣기전 회원이 등록 되었는지 아닌지 유무판단
=> StudentRegisterService.class 
    - Student.java를 이용하고 학생 정보를 insert 하기위한 클래스 학생정보가 동일시 차단 해주기도 한다
    - public boolean verify(String sNum) : db의 sNum을 기준으로 회원정보 유무존재를 파악하여 참/거짓 판별해주는 함수

------------------------------------------
StudentModifyService modifyService  = ctx.getBean("modifyService", StudentModifyService.class);
		modifyService.modify(new Student("H39lesvj7544vf89", "deer", "00000", "melissa", 
				26, "W", "Vocal Music"));

-> ctx에 Bean(modifyService, StudentModifyService.class)을 가져온다.
ctx를 저장하고 가져온 modifyService에modify이름을 지정해주고 안에 Student클래스와 속성값을 넣어준다.
=> StudentModifyService.class
   - 학생 업데이트를 위한 클래스 sNum을 기준으로 학생조회 번호가 존재하면 업데이트 아닐시, 업데이트 못함.
---------------------------------------------------------

StudentSelectService selectService = ctx.getBean("selectService", StudentSelectService.class);
		Student modifiedStudent = selectService.select("H39lesvj7544vf89");
		System.out.print("sNum:" + modifiedStudent.getsNum() + "\t");
		System.out.print("|sId:" + modifiedStudent.getsId() + "\t");
		System.out.print("|sPw:" + modifiedStudent.getsPw() + "\t");
		System.out.print("|sName:" + modifiedStudent.getsName() + "\t");
		System.out.print("|sAge:" + modifiedStudent.getsAge() + "\t");
		System.out.print("|sGender:" + modifiedStudent.getsGender() + "\t");
		System.out.print("|sMajor:" + modifiedStudent.getsMajor() + "\n\n");

-> ctx에 Bean(selectService, StudentSelectService,class)를 가져와 저장시켜주고 selectService에 넣어준다.
selectService에 select("")를 가져와 넣어주고 selectService에 저장시켜준다.
출력문에 아까 값을 넣어주고 읽어준 sNum과  sNum,Id값 등을 얻어와서 차례차례 넣어준다.
=> "H39lesvj7544vf89"(sNum기준)의 정보참조를 위한 특정인원 회원의 정보 추출코드 (sNum, sId, sPw, sName, sAge, sGender, sMajor)

=>StudentSelectService.class
  - sNum 으로 특정학생의 모든 정보를 select 하여 불러오는 클래스

-----------------------------------------------------

StudentAllSelectService allSelectService = ctx.getBean("allSelectService", StudentAllSelectService.class);
		Map<String, Student> allStudent = allSelectService.allSelect();
		Set<String> keys = allStudent.keySet();
		Iterator<String> iterator = keys.iterator();

->  ctx에 Bean(allSelectService,StudentAllSelectService.class)를 저장해주고allSelectService에 넣어줌
스트링을 키에 저장해준 후 이터레이터를 이용해 반복문으로 돌려준다.

while (iterator.hasNext()) {
			String key = iterator.next();
			Student student = allStudent.get(key);
			System.out.print("sNum:" + student.getsNum() + "\t");
			System.out.print("|sId:" + student.getsId() + "\t");
			System.out.print("|sPw:" + student.getsPw() + "\t");
			System.out.print("|sName:" + student.getsName() + "\t");
			System.out.print("|sAge:" + student.getsAge() + "\t");
			System.out.print("|sGender:" + student.getsGender() + "\t");
			System.out.println("|sMajor:" + student.getsMajor() + "\t");
			
		}
-> 돌려준걸 while문으로 읽어들이고 hasNext에 저장한다
=> 모든 인원들의 데이터베이스 정보를 가져와 콘솔창에 출력
=> 스캐너를 이용하여 입력 값을 통한 학생에 관련된 디비 자료를 불러온다 

-----------------------------------------------------------

Scanner scanner = new Scanner(System.in);
			String str = "";
-> 입력할 수 있게 Scanner 생성해준다.

System.out.println("Select number.");
			System.out.println("1. Check student information");
			System.out.println("2. Exit");
실행시키면 뜨는 말			
			str = scanner.next();
			if(str.equals("2")) {
				System.out.println("Bye~~");
				break;
2를 입력하면 bye뜸
			} else {
				System.out.println("Please input your class number.");
				
				str = scanner.next();
				Student student = selectService.select(str);
				System.out.print("sNum:" + student.getsNum() + "\t");
				System.out.print("|sId:" + student.getsId() + "\t");
				System.out.print("|sPw:" + student.getsPw() + "\t");
				System.out.print("|sName:" + student.getsName() + "\t");
				System.out.print("|sAge:" + student.getsAge() + "\t");
				System.out.print("|sGender:" + student.getsGender() + "\t");
				System.out.println("|sMajor:" + student.getsMajor() + "\t");
			}
			
		}
1을 입력하게 되면 저장했던 숫자 아이디 비번 이름 나이 성별 학과가 출력된다.
=> 1번을 누르면 Please input your class number.가 뜨고,
   H399omjjyv56t3d5(클래스 넘버를 입력하면),
   sNum:H399omjjyv56t3d5 |sId:pig |sPw:30028 |sName:holly |sAge:19 |sGender:W |sMajor:Statistics
   정보가 뜬다.

=> 해당 정보가 뜨면 다시 반복되서 입력창이 출력된다.


=> 입력문 코드 이다 초기 입력값 1,2를 구분지어 while(true)무한루프,  if/equals를 이용하여 출력값을 조정했다.
=> Map, Set, Iterator 를 이용하여 특정 입력 값을 통해 해당 정보를 다 불러 들일 수 있게 짜여있다.

		
		ctx.close();
		
	}